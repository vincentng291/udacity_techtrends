[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_db_connection():\n    connection = sqlite3.connect('database.db')\n    global connection_count\n    connection_count += 1\n    connection.row_factory = sqlite3.Row\n    return connection\n# Function to get a post using its ID\ndef get_post(post_id):\n    connection = get_db_connection()\n    post = connection.execute('SELECT * FROM posts WHERE id = ?',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_post(post_id):\n    connection = get_db_connection()\n    post = connection.execute('SELECT * FROM posts WHERE id = ?',\n                        (post_id,)).fetchone()\n    connection.close()\n    return post\n# Define the Flask application\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your secret key'\n# Define the main route of the web application ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    connection = get_db_connection()\n    posts = connection.execute('SELECT * FROM posts').fetchall()\n    connection.close()\n    return render_template('index.html', posts=posts)\n# Define how each individual article is rendered \n# If the post ID is not found a 404 page is shown\n@app.route('/<int:post_id>')\ndef post(post_id):\n    post = get_post(post_id)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def post(post_id):\n    post = get_post(post_id)\n    if post is None:\n        logger.info(\"Not found article!\")\n        return render_template('404.html'), 404\n    else:\n        print(post)\n        logger.info(\"Article %s retrieved!\", post[\"title\"])\n        return render_template('post.html', post=post)\n# Define the About Us page",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def about():\n    logger.info(\"About page is accessed!\")\n    return render_template('about.html')\n# Define the post creation functionality \n@app.route('/create', methods=('GET', 'POST'))\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        content = request.form['content']\n        if not title:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create():\n    if request.method == 'POST':\n        title = request.form['title']\n        content = request.form['content']\n        if not title:\n            flash('Title is required!')\n        else:\n            connection = get_db_connection()\n            connection.execute('INSERT INTO posts (title, content) VALUES (?, ?)',\n                         (title, content))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    return Response(response=\"result: OK - healthy\", status=200)\n@app.route('/metrics')\ndef metrics():\n    connection = get_db_connection()\n    posts = connection.execute('SELECT * FROM posts').fetchall()\n    connection.commit()\n    connection.close()\n    return Response(response=json.dumps({\"db_connection_count\": connection_count, \"post_count\": len(posts)}), status=200)\n# start the application on port 3111",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def metrics():\n    connection = get_db_connection()\n    posts = connection.execute('SELECT * FROM posts').fetchall()\n    connection.commit()\n    connection.close()\n    return Response(response=json.dumps({\"db_connection_count\": connection_count, \"post_count\": len(posts)}), status=200)\n# start the application on port 3111\nif __name__ == \"__main__\":\n   app.run(host='0.0.0.0', port='3111') # type: ignore",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogging.basicConfig(format='%(levelname)s:%(name)s:%(asctime)s %(message)s', level=logging.DEBUG)\nconnection_count = 0\n# Function to get a database connection.\n# This function connects to database with the name `database.db`\ndef get_db_connection():\n    connection = sqlite3.connect('database.db')\n    global connection_count\n    connection_count += 1\n    connection.row_factory = sqlite3.Row",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connection_count",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "connection_count = 0\n# Function to get a database connection.\n# This function connects to database with the name `database.db`\ndef get_db_connection():\n    connection = sqlite3.connect('database.db')\n    global connection_count\n    connection_count += 1\n    connection.row_factory = sqlite3.Row\n    return connection\n# Function to get a post using its ID",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SECRET_KEY'] = 'your secret key'\n# Define the main route of the web application \n@app.route('/')\ndef index():\n    connection = get_db_connection()\n    posts = connection.execute('SELECT * FROM posts').fetchall()\n    connection.close()\n    return render_template('index.html', posts=posts)\n# Define how each individual article is rendered ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SECRET_KEY'] = 'your secret key'\n# Define the main route of the web application \n@app.route('/')\ndef index():\n    connection = get_db_connection()\n    posts = connection.execute('SELECT * FROM posts').fetchall()\n    connection.close()\n    return render_template('index.html', posts=posts)\n# Define how each individual article is rendered \n# If the post ID is not found a 404 page is shown",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "init_db",
        "description": "init_db",
        "peekOfCode": "connection = sqlite3.connect('database.db')\nwith open('schema.sql') as f:\n    connection.executescript(f.read())\ncur = connection.cursor()\ncur.execute(\"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            ('2020 CNCF Annual Report', 'The Cloud Native Computing Foundation (CNCF) annual report for 2020 is now available. The report highlights the growth of the community, events, projects, and more, over the past year.')\n            )\ncur.execute(\"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            ('KubeCon + CloudNativeCon 2021', 'The Cloud Native Computing Foundation flagship conference gathers leading technologists from leading open source and cloud native communities to further the education and advancement of cloud native computing.')\n            )",
        "detail": "init_db",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "init_db",
        "description": "init_db",
        "peekOfCode": "cur = connection.cursor()\ncur.execute(\"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            ('2020 CNCF Annual Report', 'The Cloud Native Computing Foundation (CNCF) annual report for 2020 is now available. The report highlights the growth of the community, events, projects, and more, over the past year.')\n            )\ncur.execute(\"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            ('KubeCon + CloudNativeCon 2021', 'The Cloud Native Computing Foundation flagship conference gathers leading technologists from leading open source and cloud native communities to further the education and advancement of cloud native computing.')\n            )\ncur.execute(\"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            ('Kubernetes v1.20 Release Notes', 'Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications. The open source project is hosted by the Cloud Native Computing Foundation (CNCF).')\n            )",
        "detail": "init_db",
        "documentation": {}
    }
]